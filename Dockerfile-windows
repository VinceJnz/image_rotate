# Use a Windows base image
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Install Chocolatey (Windows package manager)
RUN powershell -Command \
    Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# Install Visual Studio Build Tools
RUN choco install visualstudio2022buildtools --version=17.6.5 --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --quiet --norestart" -y

# Install CMake
RUN choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

# Set working directory
WORKDIR C:\app

# Copy your source code into the container
COPY . C:\app

# Copy prebuilt OpenCV binaries into the container
COPY opencv C:\opencv

# Compile the C++ code using MSVC
RUN "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && \
    cl /EHsc /I"C:\opencv\build\include" /link /LIBPATH:"C:\opencv\build\x64\vc16\lib" rotate_video.cpp opencv_core.lib opencv_videoio.lib opencv_highgui.lib opencv_imgproc.lib opencv_imgcodecs.lib